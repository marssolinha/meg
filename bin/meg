#!/usr/bin/env ruby

require "thor"
require 'active_support/concern'

module Meg
  class SubThor < Thor
    def self.banner(command, namespace = nil, subcommand = false)
      sans_help = ARGV[0] == "help" ? ARGV[1] : ARGV[0]
      "#{basename} #{sans_help} #{command.usage}"
    end
  end

  $modules = []
  $application_path = "#{__dir__}/.."
  
  CLASS_REGEX = /class\s(\w+)\s+\<\s+\SubThor/
  begin
      
    # load shared libraries
    lib_files = $application_path + "/lib/*.rb"
    Dir.glob(lib_files).each do |file|
      require file
    end

    # load module code
    concerns_files = $application_path + "/concerns/*.rb"
    Dir.glob(concerns_files).each do |file|
      require file
    end

    # load modules
    modules_files = $application_path + "/modules/*.rb"
    Dir.glob(modules_files).each do |mod_file|
      require mod_file
      $modules << open(mod_file) do |file|
        file.grep(CLASS_REGEX) do |line|
          class_name = line.match(CLASS_REGEX)[1]
          self.const_get(class_name)
        end
      end
    end
  rescue StandardError => e
    puts "Unable to load module: #{e.message}"
  end

  class Meg < Thor
    attr_accessor :projectname

    include Thor::Actions

    def self.exit_on_failure?
      true
    end

    def self.source_root
      File.dirname(__FILE__)
    end

    no_tasks do
        def projectname
            @projectname.downcase.gsub(" ", "-")
        end
    end

    method_option :projecttype, :type => :string, :aliases => "-t", :default => "simple-app"
    desc "new PROJECTNAME", "Generates a new project skeleton named PROJECTNAME"
    def new(projectname)
      self.projectname = projectname

      projecttype = options[:projecttype]
      opts = { :projectname => projectname }
      puts "Generating project skeleton for '#{projectname}' with type '#{projecttype}'"
      if (!File.directory?("#{__dir__}/../templates/projects/#{projecttype}"))
	raise Thor::Error, "No templates found for application type '#{projecttype}'"
	return
      end
      directory "#{__dir__}/../templates/projects/#{projecttype}/", "#{projectname.downcase.gsub(" ", "-")}/", opts
    end

    # load in the subcommands
    $modules.each do |mod_array|
      mod_array.each do |klass|
        begin
          desc "#{klass::SUBCOMMAND} SUBCOMMAND", klass::DESCRIPTION
          subcommand klass::SUBCOMMAND, klass
        rescue StandardError => e
          puts "Unable to load subcommand: #{e.message}"
        end
      end
    end
  end
end

Meg::Meg.start(ARGV)
